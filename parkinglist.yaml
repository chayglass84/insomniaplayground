openapi: 3.0.0
info:
  title: ParkEasy API
  version: 1.1.0
  description: A simple API for finding parking lots, reserving spots, and managing reservations.
  contact:
    name: ParkEasy Support
    email: support@parkeasy.app
servers:
  - url: https://api.parkeasy.app
tags:
  - name: Parking
    description: Operations related to parking lots and reservations
  - name: Authentication
    description: For user/account authentication items
paths:
  /lots:
    get:
      summary: List all parking lots
      description: Retrieve a list of all available parking lots.
      operationId: listLots
      tags:
        - Parking
      responses:
        "200":
          description: A list of parking lots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParkingLot"

  /lots/{id}:
    get:
      summary: Get details of a parking lot
      description: Retrieve detailed information about a specific parking lot.
      operationId: getLotById
      tags:
        - Parking
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the parking lot
          schema:
            type: string
      responses:
        "200":
          description: Parking lot details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParkingLot"
        "404":
          description: Parking lot not found

  /reservations:
    post:
      summary: Create a parking reservation
      description: Reserve a parking spot in a selected lot.
      operationId: createReservation
      tags:
        - Parking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservationInput"
      responses:
        "201":
          description: Reservation successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"

  /reservations/{id}:
    get:
      summary: Get reservation details
      description: Retrieve details of a specific parking reservation.
      operationId: getReservationById
      tags:
        - Parking
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the reservation
          schema:
            type: string
      responses:
        "200":
          description: Reservation details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "404":
          description: Reservation not found

  /reservations/{id}/cancel:
    post:
      summary: Cancel a reservation
      description: Cancel an existing parking reservation.
      operationId: cancelReservation
      tags:
        - Parking
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the reservation to cancel
          schema:
            type: string
      responses:
        "200":
          description: Reservation cancelled successfully
        "404":
          description: Reservation not found

  /register:
    post:
      summary: Register a new user
      description: Creates a new user account for accessing the parking system.
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Alex Park
                email:
                  type: string
                  format: email
                  example: alex@parkeasy.app
                password:
                  type: string
                  format: password
                  example: mysecurepassword
              required:
                - name
                - email
                - password
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid input or user already exists



  /lots/nearby:
    get:
      summary: Find nearby parking lots
      description: Returns parking lots close to the provided location coordinates.
      operationId: getNearbyLots
      tags:
        - Parking
      parameters:
        - in: query
          name: lat
          required: true
          schema:
            type: number
          description: Latitude of the user location
        - in: query
          name: lng
          required: true
          schema:
            type: number
          description: Longitude of the user location
        - in: query
          name: radius
          required: false
          schema:
            type: number
            default: 5
          description: Search radius in kilometers
      responses:
        "200":
          description: List of nearby parking lots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParkingLot"
  /reservations/{id}/extend:
    post:
      summary: Extend a reservation
      description: Extends the end time of an existing parking reservation.
      operationId: extendReservation
      tags:
        - Parking
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the reservation to extend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newEndTime:
                  type: string
                  format: date-time
                  description: The new end time for the reservation
              required:
                - newEndTime
      responses:
        "200":
          description: Reservation extended successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Invalid new end time
        "404":
          description: Reservation not found


components:
  schemas:
    ParkingLot:
      type: object
      description: A parking lot
      properties:
        id:
          type: string
        name:
          type: string
        location:
          type: string
        totalSpots:
          type: integer
        availableSpots:
          type: integer
      required:
        - id
        - name
        - location
        - totalSpots
        - availableSpots

    Reservation:
      type: object
      description: A parking reservation
      properties:
        id:
          type: string
        lotId:
          type: string
        vehiclePlate:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, cancelled, completed]
      required:
        - id
        - lotId
        - vehiclePlate
        - startTime
        - endTime
        - status

    ReservationInput:
      type: object
      description: Data for creating a new reservation
      properties:
        lotId:
          type: string
        vehiclePlate:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
      required:
        - lotId
        - vehiclePlate
        - startTime
        - endTime
